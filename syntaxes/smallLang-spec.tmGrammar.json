{
    "scopeName":"source.slspec",
    "patterns": [
        { "include": "#expression" }
    ],
    "repository": {
        "expression": {
            "patterns": [
                { "include": "#keywords.especificacion" },
                { "include": "#keywords.especificacion.types" },
                { "include": "#keywords.especificacion.types.seq" },
                { "include": "#keywords.especificacion.io" },
                { "include": "#keywords.smallLang" },
                { "include": "#keywords.otros" },
                { "include": "#types.boolean" },
                { "include": "#types.number" },
                { "include": "#types.char" },
                { "include": "#logicalConnectors" },
                { "include": "#parentesis" },
                { "include": "#comentario" }
            ]
        },
        "keywords.especificacion": {
            "match": "\\b(proc|aux|pred|pre|post|enum|type|wp)\\b",
            "name": "keywords.especificacion"
        },
        "keywords.especificacion.types": {
            "match":"\\b(ℤ|ℝ|Char|Bool|T)\\b",
            "name":"keywords.especificacion.types"
        },
        "keywords.especificacion.types.seq": {
            "begin": "\\bseq\\[",
            "end":"\\]",
            "name":"keywords.especificacion.types",
            "patterns":[
                { "include": "#keywords.especificacion.types" },
                { "include": "#keywords.especificacion.types.seq" }
            ]
        },
        "keywords.especificacion.io": {
            "match": "\\b(in|out|inout)\\b",
            "name": "keywords.especificacion.io"
        },
        "keywords.smallLang": {
            "match":"\\b(if|then|else|fi|while|do|endwhile|skip)\\b|\\:\\=",
            "name":"keywords.smallLang"
        },
        "keywords.otros": {
            "match":"\\b(from|to)\\b|∑|∏",
            "name":"keywords.otros"
        },
        "types.boolean": {
            "match":"\\b(true|false|⊥)\\b",
            "name":"types.boolean"
        },
        "types.number": {
            "match":"\\d(\\.\\d)?",
            "name":"types.number"
        },
        "types.char": {
            "match":"\".??\"",
            "name":"types.char"
        },
        "logicalConnectors": {
            "match":"(∧L|∨L|∧|∨|⟹L|⟹|⟺|≡)",
            "name":"logicalConnectors"
        },
        "parentesis": {
            "match":"(\\{|\\}|\\(|\\))",
            "name":"punctuation.parenthesis"
        },
        "comentario": {
            "begin": "\/\\*",
            "end": "\\*\/",
            "beginCaptures": {
                "0": { "name": "punctuation.comment.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.comment.close" }
            },
            "name": "punctuation.definition.comment"
        }
    }
}